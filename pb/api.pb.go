// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/api.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/api.proto

It has these top-level messages:
	FlipRequest
	FlipResponse
	HealthRequest
	HealthResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FlipRequest struct {
	Flip string `protobuf:"bytes,1,opt,name=flip" json:"flip,omitempty"`
	// TODO(Should be bytes ?)
	Target string `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
}

func (m *FlipRequest) Reset()                    { *m = FlipRequest{} }
func (m *FlipRequest) String() string            { return proto.CompactTextString(m) }
func (*FlipRequest) ProtoMessage()               {}
func (*FlipRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FlipRequest) GetFlip() string {
	if m != nil {
		return m.Flip
	}
	return ""
}

func (m *FlipRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type FlipResponse struct {
	Activated bool `protobuf:"varint,1,opt,name=activated" json:"activated,omitempty"`
}

func (m *FlipResponse) Reset()                    { *m = FlipResponse{} }
func (m *FlipResponse) String() string            { return proto.CompactTextString(m) }
func (*FlipResponse) ProtoMessage()               {}
func (*FlipResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FlipResponse) GetActivated() bool {
	if m != nil {
		return m.Activated
	}
	return false
}

type HealthRequest struct {
}

func (m *HealthRequest) Reset()                    { *m = HealthRequest{} }
func (m *HealthRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()               {}
func (*HealthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type HealthResponse struct {
	Health    string `protobuf:"bytes,1,opt,name=health" json:"health,omitempty"`
	FlipCache string `protobuf:"bytes,2,opt,name=flip_cache,json=flipCache" json:"flip_cache,omitempty"`
	FlipStore string `protobuf:"bytes,3,opt,name=flip_store,json=flipStore" json:"flip_store,omitempty"`
}

func (m *HealthResponse) Reset()                    { *m = HealthResponse{} }
func (m *HealthResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()               {}
func (*HealthResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HealthResponse) GetHealth() string {
	if m != nil {
		return m.Health
	}
	return ""
}

func (m *HealthResponse) GetFlipCache() string {
	if m != nil {
		return m.FlipCache
	}
	return ""
}

func (m *HealthResponse) GetFlipStore() string {
	if m != nil {
		return m.FlipStore
	}
	return ""
}

func init() {
	proto.RegisterType((*FlipRequest)(nil), "pb.FlipRequest")
	proto.RegisterType((*FlipResponse)(nil), "pb.FlipResponse")
	proto.RegisterType((*HealthRequest)(nil), "pb.HealthRequest")
	proto.RegisterType((*HealthResponse)(nil), "pb.HealthResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Flip service

type FlipClient interface {
	IsFlip(ctx context.Context, in *FlipRequest, opts ...grpc.CallOption) (*FlipResponse, error)
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type flipClient struct {
	cc *grpc.ClientConn
}

func NewFlipClient(cc *grpc.ClientConn) FlipClient {
	return &flipClient{cc}
}

func (c *flipClient) IsFlip(ctx context.Context, in *FlipRequest, opts ...grpc.CallOption) (*FlipResponse, error) {
	out := new(FlipResponse)
	err := grpc.Invoke(ctx, "/pb.Flip/IsFlip", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flipClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := grpc.Invoke(ctx, "/pb.Flip/Health", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Flip service

type FlipServer interface {
	IsFlip(context.Context, *FlipRequest) (*FlipResponse, error)
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
}

func RegisterFlipServer(s *grpc.Server, srv FlipServer) {
	s.RegisterService(&_Flip_serviceDesc, srv)
}

func _Flip_IsFlip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlipServer).IsFlip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Flip/IsFlip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlipServer).IsFlip(ctx, req.(*FlipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flip_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlipServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Flip/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlipServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Flip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Flip",
	HandlerType: (*FlipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsFlip",
			Handler:    _Flip_IsFlip_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Flip_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/api.proto",
}

func init() { proto.RegisterFile("pb/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x69, 0x2c, 0xc1, 0x8c, 0xd1, 0xea, 0x1c, 0x4a, 0x08, 0x15, 0x4a, 0x4e, 0x1e, 0x24,
	0x8b, 0x7a, 0xf2, 0x5c, 0x10, 0x3d, 0x78, 0x89, 0x0f, 0x20, 0x9b, 0xb8, 0x4d, 0x02, 0x21, 0xbb,
	0x66, 0xd7, 0x5e, 0x4a, 0x2f, 0xbe, 0x82, 0x37, 0x5f, 0xcb, 0x57, 0xf0, 0x41, 0x64, 0x76, 0x57,
	0x53, 0x2f, 0x61, 0xe6, 0x9b, 0xcc, 0x3f, 0xff, 0xcf, 0x42, 0xac, 0x4a, 0xc6, 0x55, 0x9b, 0xab,
	0x41, 0x1a, 0x89, 0x81, 0x2a, 0xd3, 0x45, 0x2d, 0x65, 0xdd, 0x09, 0xa2, 0x8c, 0xf7, 0xbd, 0x34,
	0xdc, 0xb4, 0xb2, 0xd7, 0xee, 0x8f, 0xec, 0x16, 0x8e, 0xee, 0xba, 0x56, 0x15, 0xe2, 0xf5, 0x4d,
	0x68, 0x83, 0x08, 0xd3, 0x75, 0xd7, 0xaa, 0x64, 0xb2, 0x9c, 0x5c, 0x44, 0x85, 0xad, 0x71, 0x0e,
	0xa1, 0xe1, 0x43, 0x2d, 0x4c, 0x12, 0x58, 0xea, 0xbb, 0xec, 0x12, 0x62, 0xb7, 0xaa, 0x95, 0xec,
	0xb5, 0xc0, 0x05, 0x44, 0xbc, 0x32, 0xed, 0x86, 0x1b, 0xf1, 0x62, 0x05, 0x0e, 0x8b, 0x11, 0x64,
	0x33, 0x38, 0xbe, 0x17, 0xbc, 0x33, 0x8d, 0x3f, 0x95, 0xad, 0xe1, 0xe4, 0x17, 0x78, 0x81, 0x39,
	0x84, 0x8d, 0x25, 0xfe, 0xbc, 0xef, 0xf0, 0x1c, 0x80, 0x8c, 0x3c, 0x57, 0xbc, 0x6a, 0x84, 0x37,
	0x11, 0x11, 0x59, 0x11, 0xf8, 0x1b, 0x6b, 0x23, 0x07, 0x91, 0x1c, 0x8c, 0xe3, 0x27, 0x02, 0xd7,
	0x9f, 0x13, 0x98, 0x92, 0x4f, 0x7c, 0x84, 0xf0, 0x41, 0xdb, 0x6a, 0x96, 0xab, 0x32, 0xdf, 0x8b,
	0x9d, 0x9e, 0x8e, 0xc0, 0x79, 0xc9, 0x96, 0xef, 0x5f, 0xdf, 0x1f, 0x41, 0x8a, 0x09, 0xdb, 0x5c,
	0x31, 0x12, 0x63, 0x5b, 0xfa, 0xee, 0xd8, 0xd6, 0xa5, 0xdf, 0xe1, 0x0a, 0x42, 0xe7, 0x1f, 0xcf,
	0x68, 0xfb, 0x5f, 0xb8, 0x14, 0xf7, 0x91, 0x97, 0x44, 0x2b, 0x19, 0x23, 0x90, 0xa4, 0x8b, 0x56,
	0x86, 0xf6, 0x15, 0x6e, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x43, 0xcc, 0xe4, 0xa8, 0xb7, 0x01,
	0x00, 0x00,
}
